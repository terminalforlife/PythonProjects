#!/usr/bin/env python3.6
#cito M:755 O:0 G:0 T:/usr/local/bin/human-generator
#------------------------------------------------------------------------------
# Project Name      - PythonProjects/source/human-generator/human-generator
# Started On        - Thu  8 Jun 23:33:23 BST 2023
# Last Change       - Thu 22 Jun 17:51:49 BST 2023
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Simple GUI utility for converting bytes to IEC or SI human-readable values.
#
# Entirely GUI. There's no command-line stuff, aside from standard Python
# debugging output, which I recommend sharing if you have any issues with it.
#
# NOTE: I'm not yet sure of the dependencies. If you have any Python programs
#       written for GTK3 (e.g., Linux Mint), then this will likely be fine.
#
#       Also, because Python is a mess, you may need to edit the shebang to
#       work with your system's Python situation. Some distributions have a
#       'python2.7', 'python3.6', and/or 'python3.9' executable, if not more, -
#       while some just have the 'python' symlink, except it's anybody's guess
#       to which actual version of Python this is linked! What a faff. If you
#       do edit the shebang, aim for at least Python 3.6.
#
# Features:
#
# N/A
#
# Bugs:
#
# N/A
#
# Dependencies:
#
#   python (>= 3.6)
#   python3-gi (>= 3.26.1)
#------------------------------------------------------------------------------

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk

def Human(Power, Bytes) -> int:
	if Bytes < Power:
		return(str(Bytes))

	for Unit in 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y', '?':
		if Unit == '?':
			ErrWin = ErrorWin(Message = 'Size limit reached.')
			return('N/A')

		Bytes /= Power
		if Bytes < Power:
			Result = f"{Bytes:0.1f}"
			if Result[-2:] == '.0':
				Result = Result[0:-2]

			if Power == 1000:
				Unit = Unit + 'B'

			return(f"{Result}{Unit}")

class MainCombo(Gtk.ComboBoxText):
	def __init__(Self):
		Gtk.ComboBoxText.__init__(Self)
		Self.set_margin_end(10)
		Self.append_text('IEC (1024)')
		Self.append_text('SI (1000)')
		Self.set_active(0)

class Label(Gtk.Label):
	def __init__(Self, Message, Selectable):
		Gtk.Label.__init__(Self, Message)
		Self.set_margin_bottom(10)
		Self.set_margin_start(10)
		Self.set_margin_end(10)
		Self.set_margin_top(10)
		Self.set_selectable(Selectable)

class ErrorWin(Gtk.Window):
	def __init__(Self, Message):
		Gtk.Window.__init__(Self, title = 'Error', modal = True)
		Self.set_position(Gtk.Align.CENTER)
		Self.set_transient_for(Main)
		Self.set_default_size(120, 20)
		Self.set_resizable(False)
		Self.set_border_width(10)

		Grid = Gtk.Grid()
		Self.add(Grid)

		Button = Gtk.Button(label = 'OK')
		Button.connect('clicked', Self.DestroyWin)
		Button.set_margin_top(10)

		ErrLabel = Label(Message, False)

		Grid.attach(ErrLabel, 1, 1, 8, 1)
		Grid.attach(Button, 4, 2, 2, 1)

		Self.connect('delete-event', Self.DestroyWin)
		Self.show_all()

	# Don't care about the last two arguments.
	def DestroyWin(Self, *_):
		Self.destroy()

class MainWin(Gtk.Window):
	def __init__(Self):
		Gtk.Window.__init__(Self, title = 'Human Generator')
		Self.set_position(Gtk.Align.CENTER)
		Self.set_default_size(300, 40)
		Self.set_resizable(False)
		Self.set_border_width(10)

		Grid = Gtk.Grid()
		Self.add(Grid)

		ButtonSubmit = Gtk.Button(label = 'Generate')
		ButtonSubmit.connect('clicked', Self.Generate)

		Self.Entry = Gtk.Entry()
		Self.Entry.set_margin_end(10)
		Self.Entry.set_margin_bottom(10)
		Self.Entry.connect('activate', Self.Generate)

		Self.Label = Label(None, True)
		Self.Combo = MainCombo()

		Frame = Gtk.Frame()
		Frame.set_hexpand(True)
		Frame.set_margin_bottom(10)

		Grid.attach(Self.Entry, 1, 1, 3, 1)
		Grid.attach(Frame, 4, 1, 1, 1)
		Grid.attach(Self.Combo, 1, 2, 3, 1)
		Grid.attach(ButtonSubmit, 4, 2, 2, 1)

		Frame.add(Self.Label)

		Self.Entry.grab_focus()

		Self.connect('delete-event', Gtk.main_quit)
		Self.show_all()

	def Generate(Self, Widget):
		String = Self.Entry.get_text()

		ComboIndex = Self.Combo.get_active()
		if ComboIndex == 0:
			Power = 1024
		elif ComboIndex == 1:
			Power = 1000

		if String.isdigit():
			Self.Label.set_label(Human(Power, int(String)))
		else:
			ErrWin = ErrorWin(Message = 'Please enter a number.')

Main = MainWin()

Gtk.main()
